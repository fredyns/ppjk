<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\controllers\base;

use Yii;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use dmstr\bootstrap\Tabs;
use cornernote\returnurl\ReturnUrl;
use app\models\JobContainer;
use app\models\search\JobContainerSearch;
use app\models\form\JobContainerForm;
use app\actioncontrols\JobContainerActControl;

/**
 * JobContainerController implements the CRUD actions for JobContainer model.
 */
class JobContainerController extends Controller
{


    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;

    
    /**
     * Lists all active JobContainer models.
     * @return mixed
     */
    public function actionIndex()
    {
        $searchModel = new JobContainerSearch;
        $dataProvider = $searchModel->searchIndex($_GET);
        $actionControl = JobContainerActControl::checkAccess('index', $searchModel);

        Tabs::clearLocalStorage();
        Url::remember();

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'actionControl' => $actionControl,
            'searchModel' => $searchModel,
        ]);
    }

    
    /**
     * Lists deleted active JobContainer models.
     * @return mixed
     */
    public function actionDeleted()
    {
        $searchModel = new JobContainerSearch;
        $dataProvider = $searchModel->searchDeleted($_GET);
        $actionControl = JobContainerActControl::checkAccess('deleted', $searchModel);

        Tabs::clearLocalStorage();
        Url::remember();

        return $this->render('deleted', [
            'dataProvider' => $dataProvider,
            'actionControl' => $actionControl,
            'searchModel' => $searchModel,
        ]);
    }

    
    /**
     * Displays a single JobContainer model.
     * @param integer $id
     *
     * @return mixed
     */
    public function actionView($id)
    {
        $model = $this->findModel($id);
        $actionControl = JobContainerActControl::checkAccess('view', $model);

        Url::remember();
        Tabs::rememberActiveState();

        return $this->render('view', [
            'model' => $model,
            'actionControl' => $actionControl,
        ]);
    }

    /**
     * Creates a new JobContainer model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new JobContainerForm;
        $actionControl = JobContainerActControl::checkAccess('create', $model);

        try {
            if ($model->load($_POST) && $model->save()) {
                Yii::$app->getSession()->addFlash('success', "Data berhasil disimpan!");

                return $this->redirect(ReturnUrl::getUrl(Url::previous()));
            } elseif (!Yii::$app->request->isPost) {
                $model->load($_GET);
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            $model->addError('_exception', $msg);
        }

        return $this->render('create', [
            'model' => $model,
            'actionControl' => $actionControl,
        ]);
    }

    /**
     * Updates an existing JobContainer model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
        $model = $this->findForm($id);
        $actionControl = JobContainerActControl::checkAccess('update', $model);

        if ($model->load($_POST) && $model->save()) {
            Yii::$app->getSession()->addFlash('success', "Data berhasil diperbarui!");

            return $this->redirect(ReturnUrl::getUrl(Url::previous()));
        }

        return $this->render('update',
                [
                'model' => $model,
                'actionControl' => $actionControl,
        ]);
    }

    /**
     * Deletes an existing JobContainer model.
     * If deletion is successful, the browser will be redirected to the previous page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        try {
            $model = $this->findModel($id);

            JobContainerActControl::checkAccess('delete', $model);

            if ($model->delete() !== false) {
                Yii::$app->getSession()->addFlash('info', "Data berhasil dihapus!");
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            Yii::$app->getSession()->addFlash('error', $msg);
        } finally {
            return $this->redirect(ReturnUrl::getUrl(Url::previous()));
        }
    }

    
    /**
     * Restores an deleted JobContainer model.
     * If restoration is successful, the browser will be redirected to the previous page.
     * @param integer $id
     * @return mixed
     */
    public function actionRestore($id)
    {
        try {
            $model = $this->findModel($id);

            JobContainerActControl::checkAccess('restore', $model);

            if ($model->restore() !== false) {
                Yii::$app->getSession()->addFlash('success', "Data berhasil dikembalikan!");
            }
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            Yii::$app->getSession()->addFlash('error', $msg);
        } finally {
            return $this->redirect(ReturnUrl::getUrl(Url::previous()));
        }
    }

    
    /**
     * Finds the JobContainer model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return JobContainer the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = JobContainer::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'Halaman yang dicari tidak ditemukan.');
        }
    }

    /**
     * Finds the JobContainer form model for modification.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return JobContainerForm the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findForm($id)
    {
        if (($model = JobContainerForm::findOne($id)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'Halaman yang dicari tidak ditemukan.');
        }
    }
}
