<?php

use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\widgets\Pjax;
use yii\helpers\Url;
use cornernote\returnurl\ReturnUrl;
use dmstr\bootstrap\Tabs;
use fredyns\suite\helpers\ActiveUser;
use fredyns\suite\widgets\DetailView;
use kartik\grid\GridView;
use app\models\JobContainer;
use app\actioncontrols\ShippingInstructionActControl;

/**
 * @var yii\web\View $this
 * @var app\models\StuffingLocation $model
 */
$copyParams = $model->attributes;

$this->title = $actionControl->breadcrumbLabel('index')." "
    .$actionControl->breadcrumbLabel('view');

$this->params['breadcrumbs'][] = $actionControl->breadcrumbItem('index');
$this->params['breadcrumbs'][] = $actionControl->breadcrumbLabel('view');
?>
<div class="giiant-crud stuffing-location-view">

    <h1>
        <?= Yii::t('app', 'Stuffing Location') ?>
        <small>
            <?= $model->name ?>
            <?php if ($model->recordStatus == 'deleted'): ?>
                <span class="badge">deleted</span>
            <?php endif; ?>
        </small>
    </h1>

    <div class="clearfix crud-navigation">

        <!-- menu buttons -->
        <div class='pull-left'>
            <?= $actionControl->buttons(['index', 'create']); ?>
        </div>

        <div class="pull-right">
            <?= $actionControl->buttons(['update', 'delete', 'restore']); ?>
        </div>

    </div>

    <hr />

    <?php $this->beginBlock('app\models\StuffingLocation'); ?>
    <?=
    DetailView::widget([
        'model' => $model,
        'attributes' => [
            'name',
        ],
    ]);
    ?>

    <?php $this->endBlock(); ?>

    <?php $this->beginBlock('JobContainers'); ?>

    <?php
    Pjax::begin([
        'id' => 'pjax-JobContainers',
        'enableReplaceState' => false,
        'linkSelector' => '#pjax-JobContainers ul.pagination a, th a',
        'clientOptions' => [
            'pjax:success' => 'function(){alert(\"yo\")}',
        ],
    ]);

    // generated by fredyns\suite\giiant\crud\providers\core\RelationProvider::relationGrid
    $JobContainerActControl = new \app\actioncontrols\JobContainerActControl;

    $addJobContainer = $JobContainerActControl->button('create',
        [
        'label' => 'New JobContainer',
        'urlOptions' => [
            'JobContainerForm' => ['stuffingLocation_id' => $model->id],
        ],
    ]);

    echo '<div class=\"table-responsive\">';
    echo GridView::widget([
        //'layout' => '{summary}{pager}<br/>{items}{pager}',
        'dataProvider' => new \yii\data\ActiveDataProvider([
            'query' => $model->getJobContainers(),
            'pagination' => [
                'pageSize' => 50,
                'pageParam' => 'page-jobcontainers',
            ]
            ]),
        'pager' => [
            'class' => yii\widgets\LinkPager::className(),
            'firstPageLabel' => 'First',
            'lastPageLabel' => 'Last'
        ],
        'tableOptions' => ['class' => 'table table-striped table-bordered table-hover'],
        'headerRowOptions' => ['class' => 'x'],
        'columns' => [
            ['class' => 'kartik\grid\SerialColumn'],
            [
                'label' => 'Shipping Inst.',
                'attribute' => 'shippingInstructionNumber',
                'format' => 'html',
                'value' => function (JobContainer $model, $key, $index, $widget) {
                    $siActControl = new ShippingInstructionActControl([
                        'model' => $model->shippingInstruction,
                    ]);

                    return 'SI <b>#'.$siActControl->linkTo.'</b>'
                        .' &nbsp;<i class="inline-label">from</i> '
                        .$model->shippingInstruction->shipper->name
                        .' &nbsp;<i class="inline-label">to</i> '
                        .$model->shippingInstruction->destination->name
                        .' &nbsp;<i class="inline-label">with</i> '
                        .$model->shippingInstruction->shipping->name;
                },
                'group' => true, // enable grouping,
                'groupedRow' => true, // move grouped column to a single grouped row
                'groupOddCssClass' => 'kv-grouped-row', // configure odd group cell css class
                'groupEvenCssClass' => 'kv-grouped-row', // configure even group cell css class
            ],
            [
                'label' => 'Date',
                'attribute' => 'stuffingDate',
                'options' => [
                    'width' => '60px',
                ],
                'value' => function ($model) {
                    $date = new \Datetime($model->stuffingDate);

                    return ($date) ? $date->format('d M') : '-';
                },
            ],
            [
                'label' => 'Cont. Number',
                'class' => 'fredyns\suite\grid\KartikViewColumn',
                'actionControl' => 'app\actioncontrols\JobContainerActControl',
                'attribute' => 'containerNumber',
                'options' => [
                    'width' => '120px',
                ],
            ],
            [
                'attribute' => 'size',
                'value' => function ($model) {
                    return $model->size ? $model->sizeLabel : '-';
                },
            ],
            [
                'attribute' => 'type_id',
                'value' => function ($model) {
                    return ArrayHelper::getValue($model, 'type.name', '-');
                },
            ],
            [
                'label' => 'Depo',
                'attribute' => 'containerDepoName',
                'value' => function ($model) {
                    return ArrayHelper::getValue($model, 'containerDepo.name', '-');
                },
            ],
            'notes',
            [
                'class' => 'fredyns\suite\grid\KartikActionColumn',
                'actionControl' => 'app\actioncontrols\JobContainerActControl',
            ],
        ],
        'containerOptions' => ['style' => 'overflow: auto'], // only set when $responsive = false
        'headerRowOptions' => ['class' => 'kartik-sheet-style'],
        'filterRowOptions' => ['class' => 'kartik-sheet-style'],
        'pjax' => false, // pjax is set to always true for this demo
        'toolbar' => [
            $addJobContainer.' {export}',
        ],
        'export' => [
            'icon' => 'export',
            'label' => 'Export',
        ],
        'bordered' => true,
        'striped' => true,
        'condensed' => true,
        'responsive' => true,
        'hover' => true,
        'showPageSummary' => true,
        'pageSummaryRowOptions' => [
            'class' => 'kv-page-summary',
            'style' => 'height: 100px;'
        ],
        'persistResize' => false,
        'exportConfig' => [
            GridView::EXCEL => [
                'label' => 'Save as EXCEL',
                'filename' => $this->title.' - JobContainer',
            ],
            GridView::PDF => [
                'label' => 'Save as PDF',
                'filename' => $this->title.' - JobContainer',
            ],
        ],
        'panel' => [
            'type' => GridView::TYPE_PRIMARY,
            'heading' => false,
        ],
        'panelBeforeTemplate' => '
            <div class="clearfix">{summary}</div>
            <div class="pull-right">
                <div class="btn-toolbar kv-grid-toolbar" role="toolbar">
                    {toolbar}
                </div>
            </div>
            <div class="pull-left">
                <div class="kv-panel-pager">
                    {pager}
                </div>
            </div>
            {before}
            <div class="clearfix"></div>
        ',
    ]);
    echo '</div>';

    Pjax::end();
    ?>

    <?php $this->endBlock(); ?>

    <?php $this->beginBlock('info'); ?>
    <?=
    DetailView::widget([
        'model' => $model,
        'profileActControl' => 'app\actioncontrols\ProfileActControl',
        'attributes' => [
            [
                'attribute' => 'recordStatus',
                'format' => 'html',
                'value' => '<span class="badge">'.$model->recordStatus.'</span>',
            ],
            [
                'label' => 'Created',
                'blamed' => 'createdBy',
                'timestamp' => 'created_at',
            ],
            [
                'label' => 'Updated',
                'blamed' => 'updatedBy',
                'timestamp' => 'updated_at',
            ],
            [
                'label' => 'Deleted',
                'blamed' => 'deletedBy',
                'timestamp' => 'deleted_at',
            ],
        ],
    ]);
    ?>
    <?php $this->endBlock(); ?>

    <?=
    Tabs::widget([
        'id' => 'relation-tabs',
        'encodeLabels' => false,
        'items' => [
            [
                'label' => '<b class=""># '.$model->id.'</b>',
                'content' => $this->blocks['app\models\StuffingLocation'],
                'active' => true,
            ],
            [
                'content' => $this->blocks['JobContainers'],
                'label' => '<small>Job Containers <span class="badge badge-default">'
                .$model->getJobContainers()->count()
                .'</span></small>',
                'active' => false,
            ],
            [
                'content' => $this->blocks['info'],
                'label' => '<small>info</small>',
                'active' => false,
                'visible' => ActiveUser::isAdmin(),
            ],
        ],
    ]);
    ?>

</div>
